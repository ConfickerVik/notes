import tkinter
from tkinter import *
from tkinter import scrolledtext, PhotoImage
from threading import Thread
import time


"""Функция расчета значений, для нахождения средней производительности АСУ"""
def get_value():
    """Cреднее время безотказной работы одной ЭВМ"""
    m = int(v.get())
    """Интенсивность отказов в сутки"""
    lam = 1 / m
    a.set(lam)
    """Время ремонта АСУ"""
    Tobsl = 2
    b.set(Tobsl)
    """Интенсивность восстановления в сутки"""
    mu = 1 / Tobsl
    c.set(mu)
    """Интенсивность перехода СМО из состояния S0  в состояние S1"""
    lam0 = 2 * lam
    d.set(lam0)
    """Интенсивность перехода СМО из состояния S1  в состояние S2"""
    lam1 = lam
    e.set(lam1)
    """Интенсивность перехода СМО из состояния S2 в состояние S1"""
    mu1 = mu
    f.set(mu1)
    """Интенсивность перехода СМО из состояния S1 в состояние S0"""
    mu2 = 2 * mu
    g.set(mu2)
    """Вероятность нахождения системы в S0"""
    p0 = (1 + lam0 / mu1 + lam0 * (lam1 / (mu1 * mu2))) ** (-1)
    h.set(p0)
    """Вероятность нахождения системы в S1"""
    p1 = (lam0 / mu1) * p0
    j.set(p1)
    """Вероятность нахождения системы в S2"""
    p2 = (lam1 / mu2) * p1
    k.set(p2)
    """Средняя производительность АСУ"""
    sp = 100 * (p0 + p1) + 30 * p2
    l.set(sp)

"""Функция запуска эмуляции"""
def get_time():
    global kol, text1, filewin, thread
    kol = ''
    """Создание нового окна"""
    filewin = Toplevel(root)
    """Запрещаем изменение размера окна"""
    filewin.resizable(width=False, height=False)
    """Создаем в окне надпись, текстовое поле(text1) и кнопку запуска эмуляции(btn_ok)"""
    label2 = Label(filewin, text="Введите время безотказной работы ЭВМ:")
    text1 = Text(filewin, height=1, width=35, font='Arial 10')
    """Создаем поток и определяем в него функцию start_prog"""
    thread = Thread(target=start_prog, args=())
    """На кнопку определяем запуск потока"""
    btn_ok = Button(filewin, text="Запустить", command=thread.start)
    btn_ok.place(x=10, y=60)
    label2.pack()
    text1.pack()
    btn_ok.pack()
    console.delete('1.0', 'end')

"""Эмуляция работы"""
def start_prog():
    global save1, save2, save3, oh
    """Получаем значение введеное в text1"""
    kol = int(text1.get('1.0', 'end'))
    save1 = 1; save2 = 1; save3 = 1
    """Закрываем окно ввода"""
    filewin.destroy()
    """В консоль выводим сообщение о начале работы эмуляции"""
    console.insert(END, 'Началась работа эмулятора\n')
    console.yview(END)
    """Помещаем на главное окно изображения ЭВМ"""
    canvas = Canvas(root, width=300, height=100)
    canvas.place(x=275, y=20)
    my_info = PhotoImage(file='12.png')
    canvas.create_image(10, 0, anchor=NW, image=my_info)
    my_info2 = PhotoImage(file='12.png')
    canvas.create_image(130, 0, anchor=NW, image=my_info2)
    """Создаем кнопку завершения эмуляции"""
    btn_calc = Button(root, text="Остановить", command=stop_run)
    btn_calc.place(x=150, y=120)
    i = 1
    oh = 1
    """Запускаем цикл работы"""
    while i >= 1:
        time.sleep(1)
        if (i % kol == 0) and (i%(kol+1) == 0):
            my_info3 = PhotoImage(file='13.png')
            my_info4 = PhotoImage(file='13.png')
            canvas.create_image(5, 0, anchor=NW, image=my_info3)
            canvas.create_image(125, 0, anchor=NW, image=my_info4)
            console.insert(END, 'Обе ЭВМ вышли из строя, продажа билетов проводиться в ручную\n')
            console.yview(END)
            save3 = i
        elif i % save3 == 2:
            my_info = PhotoImage(file='12.png')
            canvas.create_image(10, 0, anchor=NW, image=my_info)
            my_info2 = PhotoImage(file='12.png')
            canvas.create_image(130, 0, anchor=NW, image=my_info2)
            console.insert(END, 'Обе ЭВМ восстановлены\n')
            console.yview(END)
        time.sleep(1)
        if i % kol == 0:
            my_info3 = PhotoImage(file='13.png')
            canvas.create_image(5, 0, anchor=NW, image=my_info3)
            console.insert(END, 'ЭВМ1 вышла из строя\n')
            console.yview(END)
            save1 = i
        elif i % save1 == 2:
            my_info = PhotoImage(file='12.png')
            canvas.create_image(10, 0, anchor=NW, image=my_info)
            console.insert(END, 'ЭВМ1 восстановлена\n')
            console.yview(END)
        time.sleep(1)
        if i % (kol+1) == 0:
            my_info4 = PhotoImage(file='13.png')
            canvas.create_image(125, 0, anchor=NW, image=my_info4)
            console.insert(END, 'ЭВМ2 вышла из строя\n')
            console.yview(END)
            save2 = i
        elif i % save2 == 2:
            my_info2 = PhotoImage(file='12.png')
            canvas.create_image(130, 0, anchor=NW, image=my_info2)
            console.insert(END, 'ЭВМ2 восстановлена\n')
            console.yview(END)
        time.sleep(1)
        if oh == 0:
            break
        i += 1
    """В консоль выводим сообщение об окончании работы эмуляции"""
    console.insert(END, 'Конец работы эмулятора\n')
    console.yview(END)

"""Функция завершения эмуляции"""
def stop_run():
    global oh
    oh = 0

"""Функция, содержащая условие задачи"""
def problem_sit():
    Prob = Toplevel(root)
    Prob.title('Условие задачи')
    Prob.resizable(width=False, height=False)
    label3 = Label(Prob, text="Автоматизированная система управления АСУ продажей\n "
                                 "железнодорожных билетов состоит из двух параллельно работающих ЭВМ.\n"
                                 "При выходе из строя одной ЭВМ АСУ продолжает нормально функционировать\n"
                                 "за счет работы другой ЭВМ. Поток отказов каждой ЭВМ простейший.\n"
                                 "Среднее время безотказной работы одной ЭВМ равно k суткам. \n"
                                 "При выходе из строя отказавшую ЭВМ начинают ремонтировать. \n"
                                 "Время ремонта ЭВМ распределено по показательному закону и в\n"
                                 "среднем составляет двое суток. В начальный момент обе ЭВМ исправны.\n"
                                 "Найти среднюю производительность АСУ, если при исправности хотя\n"
                                 "бы ЭВМ ее производительность равна 100%, а при отказе обеих ЭВМ \n"
                                 "продажа билетов производится вручную, обеспечивая 30% общей \n"
                                 "производительности АСУ. Провести статистическое испытание модели АСУ.")
    label3.pack()

"""Функция решение задачи"""
def problem_sol():
    global v,a,b,c,d,e,f,g,h,j,k,l
    """Создаем новое окно"""
    GitHub = Toplevel(root)
    GitHub.title('Решение задачи')
    """Запрещаем изменение размера окна"""
    GitHub.resizable(width=False, height=False)
    """Создаем поле ввода среднего времени безотказной работы одной ЭВМ для решения задачи"""
    label4 = Label(GitHub, text="Введите среднее время безотказной работы одной ЭВМ: ").grid(row=0, column=1)
    v = StringVar()
    e = Entry(GitHub, textvariable=v).grid(row=0, column=2)
    """Кнопка, вызывающая функцию get_value, каторая расчитывает все необходимые значения"""
    b1 = Button(GitHub, text="Расcчитать", width=10, command=get_value).grid(row=0, column=3)
    """Создаем поля, для вывода соответсвующих значений"""
    label16 = Label(GitHub, text="Вывод расчитанных данных").grid(row=1, column=1)

    label5 = Label(GitHub, text="Интенсивность отказов в сутки: ").grid(row=2, column=1)
    a = StringVar()
    e1 = Entry(GitHub, textvariable=a, state=DISABLED).grid(row=2, column=2)

    label6 = Label(GitHub, text="Время ремонта ЭВМ: ").grid(row=3, column=1)
    b = StringVar()
    e2 = Entry(GitHub, textvariable=b, state=DISABLED).grid(row=3, column=2)

    label7 = Label(GitHub, text="Интенсивность восстановления в сутки: ").grid(row=4, column=1)
    c = StringVar()
    e3 = Entry(GitHub, textvariable=c, state=DISABLED).grid(row=4, column=2)

    label8 = Label(GitHub, text="Из состояния S0  в состояние S1 СМО переходит с интенсивностью: ").grid(row=5, column=1)
    d = StringVar()
    e4 = Entry(GitHub, textvariable=d, state=DISABLED).grid(row=5, column=2)

    label9 = Label(GitHub, text="Из состояния S1  в состояние S2 СМО переходит с интенсивностью: ").grid(row=6, column=1)
    e = StringVar()
    e5 = Entry(GitHub, textvariable=e, state=DISABLED).grid(row=6, column=2)

    label10 = Label(GitHub, text="Из состояния S2 в состояние S1 СМО переходит с интенсивностью: ").grid(row=7, column=1)
    f = StringVar()
    e6 = Entry(GitHub, textvariable=f, state=DISABLED).grid(row=7, column=2)

    label11 = Label(GitHub, text="Из состояния S1 в состояние S0 СМО переходит с интенсивностью: ").grid(row=8, column=1)
    g = StringVar()
    e7 = Entry(GitHub, textvariable=g, state=DISABLED).grid(row=8, column=2)

    label12 = Label(GitHub, text="Вероятность P0").grid(row=9, column=1)
    h = StringVar()
    e8 = Entry(GitHub, textvariable=h, state=DISABLED).grid(row=9, column=2)

    label13 = Label(GitHub, text="Вероятность P1").grid(row=10, column=1)
    j = StringVar()
    e9 = Entry(GitHub, textvariable=j, state=DISABLED).grid(row=10, column=2)

    label14 = Label(GitHub, text="Вероятность P2").grid(row=11, column=1)
    k = StringVar()
    e10 = Entry(GitHub, textvariable=k, state=DISABLED).grid(row=11, column=2)

    label15 = Label(GitHub, text="Средняя производительность АСУ").grid(row=12, column=1)
    l = StringVar()
    e11 = Entry(GitHub, textvariable=l, state=DISABLED).grid(row=12, column=2)

"""Функция, отображающая граф СМО"""
def graph():
    erp = Toplevel(root)
    erp.title('Граф')
    erp.resizable(width=False, height=False)
    canvas = Canvas(erp, width=584, height=306)
    canvas.pack()
    my_info = PhotoImage(file='graph.gif')
    canvas.create_image(0, 0, anchor=NW, image=my_info)
    erp.mainloop()

"""Функция, отображающая теорию СМО"""
def info():
    inf = Toplevel(root)
    inf.title('Теория')
    inf.resizable(width=False, height=False)
    canvas = Canvas(inf, width=604, height=500)
    canvas.pack()
    my_info = PhotoImage(file='img.png')
    canvas.create_image(0, 0, anchor=NW, image=my_info)
    inf.mainloop()

"""Функция, отображаюзая справку"""
def help():
    hel = Toplevel(root)
    hel. title('Справка')
    hel.resizable(width=False, height=False)
    canvas = Canvas(hel, width=610, height=550)
    canvas.pack()
    my_info = PhotoImage(file='help.png')
    canvas.create_image(0, 0, anchor=NW, image=my_info)
    hel.mainloop()

"""Создание главного окна интерфейса"""
root = Tk()
root.title("Выполнитель твоих желаний")
root.geometry("500x160")
root.title('Продажа билетов')
root.resizable(width=False, height=False)
"""Создается объект Меню на главном окне"""
menubar = Menu(root)
"""Cоздаются пункты меню с размещением на основном меню """
filemenu = Menu(menubar,  tearoff=0)
filemenu1 = Menu(menubar,  tearoff=0)
filemenu2 = Menu(menubar,  tearoff=0)
filemenu3 = Menu(menubar,  tearoff=0)
"""Пункт располагается на основном меню"""
menubar.add_cascade(label="Задача", menu=filemenu)
"""Формируется список команд пункта меню"""
filemenu.add_command(label="Условие задачи", command=problem_sit)
filemenu.add_command(label="Решение задачи", command=problem_sol)
filemenu.add_separator()
filemenu.add_command(label="Выход", command=root.destroy)
"""Пункт располагается на основном меню"""
menubar.add_cascade(label="Граф", menu=filemenu1)
"""Формируется список команд пункта меню"""
filemenu1.add_command(label="Показать граф", command=graph)
"""Пункт располагается на основном меню"""
menubar.add_cascade(label="Теория", menu=filemenu2)
"""Формируется список команд пункта меню"""
filemenu2.add_cascade(label="Показать теорию", command=info)
"""Пункт располагается на основном меню"""
menubar.add_cascade(label="Справка", menu=filemenu3)
"""Формируется список команд пункта меню"""
filemenu3.add_cascade(label="Показать справку", command=help)
"""Окно конфигурируется с указанием меню для него"""
root.config(menu=menubar)

label1 = Label(root, text="Результат программы:")
"""Создается консоль для вывода сообщений эмулятора"""
console = scrolledtext.ScrolledText(root, width= 30, height= 5)
console.place(x=0, y=20)
label1.place(x=0, y=0)
"""Создается кнопка начала работы эмулятора"""
btn_calc = Button(root, text="Запустить", command=get_time)
btn_calc.place(x=50, y=120)

root = mainloop()
